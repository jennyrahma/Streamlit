# -*- coding: utf-8 -*-
"""MobileNetV3_Large Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MqFclyro6rAMHNGiOmcf932_CKO0bAeO
"""

from google.colab import drive
drive.mount('/content/drive')

import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.applications import MobileNetV3Large
from tensorflow.keras.applications.mobilenet_v3 import preprocess_input
from sklearn.utils.class_weight import compute_class_weight
import numpy as np
import os
from sklearn.metrics import classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

# === CONFIGURATION === #
data_dir = "/content/drive/MyDrive/SKRIPSI/Dataset Nanas"
img_size = (224, 224)
batch_size = 16
num_classes = 5

# === DATA AUGMENTATION === #
data_augmentation = tf.keras.Sequential([
    layers.RandomFlip('horizontal'),
    layers.RandomRotation(0.1),
    layers.RandomZoom(0.1),
    layers.RandomContrast(0.1),
    layers.RandomBrightness(0.1)
])

# === LOAD DATA === #
train_ds = tf.keras.preprocessing.image_dataset_from_directory(
    os.path.join(data_dir, "train"),
    label_mode='categorical',
    image_size=img_size,
    batch_size=batch_size,
    shuffle=True
)

val_ds = tf.keras.preprocessing.image_dataset_from_directory(
    os.path.join(data_dir, "valid"),
    label_mode='categorical',
    image_size=img_size,
    batch_size=batch_size
)

test_ds = tf.keras.preprocessing.image_dataset_from_directory(
    os.path.join(data_dir, "test"),
    label_mode='categorical',
    image_size=img_size,
    batch_size=batch_size
)

# === PREPROCESSING & PREFETCH === #
AUTOTUNE = tf.data.AUTOTUNE
train_ds = train_ds.map(lambda x, y: (preprocess_input(x), y)).prefetch(AUTOTUNE)
val_ds = val_ds.map(lambda x, y: (preprocess_input(x), y)).prefetch(AUTOTUNE)
test_ds = test_ds.map(lambda x, y: (preprocess_input(x), y)).prefetch(AUTOTUNE)

# === CLASS WEIGHTS === #
class_counts = [286, 286, 286, 286, 257]
labels = np.concatenate([[i] * count for i, count in enumerate(class_counts)])
class_weights = compute_class_weight(class_weight='balanced', classes=np.arange(num_classes), y=labels)
class_weights_dict = dict(enumerate(class_weights))

# === BUILD MODEL === #
base_model = MobileNetV3Large(include_top=False, weights='imagenet', input_shape=(224, 224, 3), pooling='avg')
base_model.trainable = True

inputs = layers.Input(shape=(224, 224, 3))
x = data_augmentation(inputs)
x = preprocess_input(x)
x = base_model(x)
x = layers.BatchNormalization()(x)
x = layers.Dropout(0.3)(x)
x = layers.Dense(128, activation='relu')(x)
x = layers.Dropout(0.3)(x)
outputs = layers.Dense(num_classes, activation='softmax')(x)
model = models.Model(inputs, outputs)

model.compile(optimizer=tf.keras.optimizers.Adam(1e-4),
              loss=tf.keras.losses.CategoricalCrossentropy(label_smoothing=0.1),
              metrics=['accuracy'])

# === CALLBACKS === #
checkpoint_cb = tf.keras.callbacks.ModelCheckpoint(
    "best_model_mobilenet.keras", save_best_only=True, monitor="val_accuracy", mode="max", verbose=1
)
callbacks = [
    tf.keras.callbacks.EarlyStopping(patience=8, restore_best_weights=True, monitor="val_accuracy"),
    tf.keras.callbacks.ReduceLROnPlateau(patience=3, factor=0.5, verbose=1, monitor="val_loss"),
    checkpoint_cb
]

# === TRAIN MODEL === #
history = model.fit(
    train_ds,
    validation_data=val_ds,
    epochs=30,
    class_weight=class_weights_dict,
    callbacks=callbacks
)

base_model.trainable = False

model.compile(optimizer=tf.keras.optimizers.Adam(1e-4),
              loss=tf.keras.losses.CategoricalCrossentropy(label_smoothing=0.1),
              metrics=['accuracy'])

model.fit(train_ds, validation_data=val_ds, epochs=10, callbacks=callbacks)

# === STAGE 2: FINE-TUNING === #
base_model.trainable = True
model.compile(optimizer=tf.keras.optimizers.Adam(1e-5),
              loss=tf.keras.losses.CategoricalCrossentropy(label_smoothing=0.1),
              metrics=['accuracy'])

checkpoint_cb2 = tf.keras.callbacks.ModelCheckpoint(
    "best_model_finetuned.keras", save_best_only=True, monitor="val_accuracy", mode="max", verbose=1
)
callbacks2 = [
    tf.keras.callbacks.EarlyStopping(patience=8, restore_best_weights=True, monitor="val_accuracy"),
    tf.keras.callbacks.ReduceLROnPlateau(patience=3, factor=0.5, verbose=1, monitor="val_loss"),
    checkpoint_cb2
]

history_stage2 = model.fit(
    train_ds,
    validation_data=val_ds,
    epochs=20,
    class_weight=class_weights_dict,
    callbacks=callbacks2
)

# === EVALUATION === #
test_loss, test_acc = model.evaluate(test_ds)
print(f"\nTest Accuracy: {test_acc:.4f}")

# === CLASSIFICATION REPORT === #
y_true = []
y_pred = []
for images, labels in test_ds:
    preds = model.predict(images)
    y_true.extend(np.argmax(labels.numpy(), axis=1))
    y_pred.extend(np.argmax(preds, axis=1))

print("\nClassification Report:")
print(classification_report(y_true, y_pred))

from sklearn.metrics import confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

# Asumsikan y_true dan y_pred sudah tersedia
cm = confusion_matrix(y_true, y_pred)

# Definisikan class_names secara manual atau ambil dari image_dataset_from_directory sebelum prefetch
class_names = ['healthy', 'root_rot', 'fruit_rot', 'mealybug_wilt', 'leaf_blight']

plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=class_names, yticklabels=class_names)
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title('Confusion Matrix')
plt.show()

# === PLOT ACCURACY & LOSS === #
plt.figure(figsize=(14, 5))
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Val Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.title('Training and Validation Accuracy')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Val Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.title('Training and Validation Loss')
plt.legend()

plt.tight_layout()
plt.show()

# === SAVE FINAL MODEL === #
model.save("/content/model_nanas_mobilenet_final.keras")

from google.colab import files
files.download("model_nanas_mobilenet_final.keras")